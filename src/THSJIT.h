#pragma once

#include "TH/THGeneral.h"
#include "torch/script.h"

#include "THSTensor.h"

// Structs for inter-op.

// Struct used to share TorchScript modules.
struct JITModuleWrapper
{
    std::shared_ptr<torch::jit::script::Module> module;

    JITModuleWrapper(std::shared_ptr<torch::jit::script::Module> m) : module(m) {}
};

// Copied from libtorch to share the type as an int8_t.
enum TypeKind : int8_t {
#define DEFINE_TYPE(T) T,
    C10_FORALL_TYPES(DEFINE_TYPE)
#undef DEFINE_TYPE
};

// Struct used to share jit-base types.
struct JITTypeWrapper
{
    int8_t enumType;
};

// Strcut used to share dynamic tensor types.
struct JITDynamicTypeWrapper : JITTypeWrapper
{
    std::shared_ptr<torch::jit::DynamicType> type;

    JITDynamicTypeWrapper(std::shared_ptr<torch::jit::DynamicType> t) : type(t)
    {
        enumType = (int8_t)TypeKind::DynamicType;
    }
};

// Strcut used to share tensor types.
struct JITTensorTypeWrapper : JITTypeWrapper
{
    std::shared_ptr<torch::jit::TensorType> type;

    JITTensorTypeWrapper(std::shared_ptr<torch::jit::TensorType> t) : type(t) 
    {
        enumType = (int8_t)TypeKind::TensorType;
    }
};

// Struct-related methods.

// Returns a pointer to the type-specific struct wrapping the input type.
void * THSJIT_getType(const c10::TypePtr type);

// API.

// Loads a TorchScript module from a file.
TH_API JITModuleWrapper * THSJIT_loadModule(const char* filename);

// Gets the number of submodules contained into the source module.
TH_API long THSJIT_getNumModules(const JITModuleWrapper * mwrapper);

// Gets the name of the module contained into the input wrapper at the given index.
TH_API const char* THSJIT_getModuleName(const JITModuleWrapper * mwrapper, const int index);

// Gets the sub-module contained into the input wrapper at the given index.
TH_API JITModuleWrapper * THSJIT_getModuleFromIndex(const JITModuleWrapper * mwrapper, const int index);

// Gets the sub-module contained into the input wrapper with the given name.
TH_API JITModuleWrapper * THSJIT_getModuleFromName(const JITModuleWrapper * mwrapper, const char* name);

// Returns the number of inputs expected by the input module.
TH_API int THSJIT_getNumberOfInputs(const JITModuleWrapper * mwrapper);

// Returns the number of outputs generated by the input module.
TH_API int THSJIT_getNumberOfOutputs(const JITModuleWrapper * mwrapper);

// Returns the type of the nth-input.
TH_API void * THSJIT_getInputType(const JITModuleWrapper * mwrapper, const int n);

// Returns the type of the nth-output.
TH_API void * THSJIT_getOutputType(const JITModuleWrapper * mwrapper, const int n);

// Returns the int8_t code for the input type.
TH_API int8_t THSJIT_typeKind(const JITTypeWrapper * twrapper);

// Returns the int8_t code for the raw type of the tensor.
TH_API int8_t THSJIT_getScalarFromTensorType(const JITTensorTypeWrapper * ttwrapper);

// Gets the number of dimensions of the input tensor type.
TH_API int THSJIT_getTensorTypeDimensions(const JITTensorTypeWrapper * ttwrapper);

// Gets the number of device of the input tensor type.
TH_API const char * THSJIT_getTensorDevice(const JITTensorTypeWrapper * ttwrapper);

// Forward pass over the input module using the input tensor.
TH_API TensorWrapper * THSJIT_forward(const JITModuleWrapper * mwrapper, const TensorWrapper ** twrapper, const int length);

// Disposes the module.
TH_API void THSJIT_moduleDispose(const JITModuleWrapper * mwrapper);

// Disposes the type.
TH_API void THSJIT_typeDispose(const JITTypeWrapper * twrapper);